@inject IHContext Context
<RadzenCard>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenText TextStyle="TextStyle.DisplayH5" Text="Workers"></RadzenText>
        <div>
            <RadzenButton Variant="Variant.Outlined" Icon="sync" Size="ButtonSize.Small" Click="Get"></RadzenButton>
            <RadzenButton Text="Grabar" Variant="Variant.Outlined" Icon="save" Size="ButtonSize.Small" Click="Update"></RadzenButton>
        </div>
    </RadzenStack>
    <br/>
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenDataGrid @ref="_grid" AllowAlternatingRows="false" AllowFiltering="false" AllowPaging="false" AllowSorting="true"
                        EditMode="DataGridEditMode.Single" Data="_workerlist" TItem="WorkerSettingsItem"
                        RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
            <HeaderTemplate>
                <RadzenButton Variant="Variant.Outlined" Icon="add" ButtonStyle="ButtonStyle.Primary" Click="@InsertRow" Size="ButtonSize.ExtraSmall" Text="AÃ±adir"/>
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn Property="@nameof(WorkerSettingsItem.ServiceName)" Title="ServiceName">
                    <EditTemplate Context="item">
                        <RadzenTextBox @bind-Value="item.ServiceName"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(WorkerSettingsItem.WorkerType)" Title="Type">
                    <EditTemplate Context="item">
                        <RadzenTextBox @bind-Value="item.WorkerType"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(WorkerSettingsItem.RunOnStart)" Title="Activo">
                    <EditTemplate Context="item">
                        <RadzenCheckBox @bind-Value="item.RunOnStart"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Context="item" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                    <Template Context="item">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                                      Size="ButtonSize.Medium" Click="@(args => EditRow(item))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="delete" Variant="Variant.Flat"
                                      Size="ButtonSize.Medium" Click="@(args => DeleteRow(item))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="item">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                                      Size="ButtonSize.Medium" aria-label="Save" Click="@((args) => SaveRow(item))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                                      Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Cancel"
                                      Click="@((args) => CancelEdit(item))">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter"
                                      Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Delete"
                                      Click="@(args => DeleteRow(item))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
</RadzenCard>

@code {
    WorkerSettings _workerSettings = new WorkerSettings();
    List<WorkerSettingsItem> _workerlist = new List<WorkerSettingsItem>();
    RadzenDataGrid<WorkerSettingsItem> _grid = new RadzenDataGrid<WorkerSettingsItem>();


    protected override void OnInitialized()
    {
        Get();
        base.OnInitialized();
    }

    private void Update()
    {
        _workerSettings.List = _workerlist;
        Context.Update(_workerSettings);
    }

    private void Get()
    {
        _workerSettings = Context.Get<WorkerSettings>() ?? new WorkerSettings();
        _workerlist = _workerSettings.List;
    }


    async Task InsertRow()
    {
        var item = new WorkerSettingsItem()
        {
            WorkerType = "Worker.Type",
            RunOnStart = false,
            ServiceName = "Service Name"
        };
        await _grid.InsertRow(item);
    }


    void OnUpdateRow(WorkerSettingsItem item)
    {
        //var selitem = _workerlist.FirstOrDefault(x => x.WorkerType == item.WorkerType);
        //if (selitem == null) return;
        //selitem = item;
        //selitem.DeepClone();
        //selitem.Active = item.Active;
        //selitem.Command = item.Command;
        _grid.Reload();
    }

    void OnCreateRow(WorkerSettingsItem item)
    {
        _workerlist.Add(item);
    }

    async Task EditRow(WorkerSettingsItem item)
    {
        await _grid.EditRow(item);
    }

    async Task SaveRow(WorkerSettingsItem item)
    {
        await _grid.UpdateRow(item);
    }

    void CancelEdit(WorkerSettingsItem item)
    {
        _grid.CancelEditRow(item);
        _grid.Reload();
    }

    async Task DeleteRow(WorkerSettingsItem item)
    {
        var selitem = _workerlist.FirstOrDefault(x => x.WorkerType == item.WorkerType);
        if (selitem != null) _workerlist.Remove(selitem);
        await _grid.Reload();
    }

}